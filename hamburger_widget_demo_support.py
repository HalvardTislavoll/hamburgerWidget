#! /usr/bin/env python3
#  -*- coding: utf-8 -*-

#     hamburger_widget_demo_support.py
# ---------------------------------------------------------------------
#    "hamburger_widget_demo project"
#    Copyright © 2023 by Halvard A. Tislavoll, Norway
#    This source code is released under the MIT License:
#    <./assets/MIT License.txt>
#    <./assets/Python-license.txt>
# ---------------------------------------------------------------------
# Support module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Aug 23, 2023 09:52:22 AM CEST  platform: Linux

#=======================================================================
#
#   Import section
#
#=======================================================================
import sys
import platform
import os.path
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from tkinter import font, Canvas, Scrollbar
import hamburger_widget_demo
import PIL
from PIL import Image, ImageTk
from itertools import count, cycle
import shared
import datetime
import time

#=======================================================================
#
#   Global section
#
#=======================================================================
_debug = True # False to eliminate debug printing from callback functions.
location = hamburger_widget_demo._location

#=======================================================================
#
#   Main Loop Function
#
#=======================================================================
def main(*args):
    '''
    Main entry point for the application.
    '''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = hamburger_widget_demo.Toplevel1(_top1)
    startup()
    root.mainloop()

#=======================================================================
#
#   Application StartUp
#
#=======================================================================
def startup():
    """
    Setup / Initialization of the program's variables
    """
    if _debug:
        print('hamburger_widget_demo.startup')
    _top1.title("Hamburger widget demo")
    ## Set application information variables
    init_shared()
    ## Write application information to the terminal
    show_application_info()
    ## Center Toplevel form on screen top
    #  top.geometry("600x450+660+210")   # from GUI file
    centre_screen(_top1, 600, 450)
    ## Set ttk style
    set_style_and_color()
    ## Make an Hamburger object
    set_Hamburgermenu()
    ## Hide the context frame at startup
    hide_widget(_w1.TfrmMenu)

def init_shared():
    shared.programName = "hamburger widget demo"
    shared.version = "0.0.2"
    shared.developer = "Halvard Tislavoll"
    shared.anno = 2023
    shared.lisence = "MIT"
    shared.opsys = platform.system()
    shared.pyver = platform.python_version()
    shared.pilver = PIL.__version__
    shared.prog_path = os.path.abspath(__file__)
    shared.current_time = datetime.datetime.now()
    shared.line_length = 60   # decorations
    shared.frame=None   # helping frame to hold the frame to destroy

def show_application_info():
    '''Information about this Application'''
    print("-"*45)
    print(f"      APPLICATION INFORMATION")
    print("-"*45)
    print(f'   Runing time now: {shared.current_time.year}-{shared.current_time.month}-{shared.current_time.day}')
    print(f"      Program name: {shared.programName}")
    print(f"           Version: {shared.version}")
    print(f"       © Copyright: {shared.developer}, {shared.anno}")
    print(f"           Lisence: {shared.lisence}")
    print(f"  Operating System: {shared.opsys}")
    print(f"    System Running: Python version.{shared.pyver}")
    print(f"      inkl. module: Pillow ver.    {shared.pilver}")
    print(f"  Program location: {shared.prog_path}")
    print('~'*shared.line_length, '\n')

def set_Hamburgermenu():
    ## Set arguments for the Hamburgerclass
    # TFrame1.place(x=30, y=30, height=355, width=545)   # from GUI file
    frame = _w1.TFrame1
    window_x = 0
    window_y = 18
    window_width = 18   # Gif geometry
    window_height = 18
    gif_paths = ["./assets/h2x.gif", "./assets/x2h.gif"]
    tooltip_text = "Use this hamburger icon to operate the context menu"  
    # make a  Hamburgermenu instance
    hMenu = Hamburgermenu(frame, window_x, window_y, window_width, window_height, gif_paths, tooltip_text)

def centre_screen(which, wid, hei):
    # added support for multiple Toplevel forms
    ws = which.winfo_screenwidth()
    hs = which.winfo_screenheight()
    x = (ws / 2) - (wid / 2)
    y = 0   # on top, else center screen: y = (hs / 2) - (hei / 2)
    which.geometry("%dx%d+%d+%d" % (wid, hei, x, y))

#=======================================================================
#
#   Set ttk style
#
#=======================================================================
def set_style_and_color():
    '''
    set style and color for form and widgets
    '''
    shared.background_1 = "gray24"
    shared.foreground_1 = "whitesmoke"
    _top1.configure(background = shared.background_1)   # Toplevel1
    shared.sty = ttk.Style()
    load_tcl_themes()   # use several themes from own folder
    get_styles()   # set default theme
    shared.sty.configure('TFrame', background=shared.background_1, foreground=shared.foreground_1)

def load_tcl_themes():
    """
    This will load the various tcl Themes in themes folder by a tcl call.
    """
    # Load onely Greg's NotSoDark theme
    _top1.tk.call("source", os.path.join(location, "themes", "notsodark.tcl"))

def get_styles():
    """
    Get the Styles/Themes for the ttk widgets.
    """
    style_names = list(shared.sty.theme_names())
    style_names.sort(reverse=False)
    nsd = style_names.index("notsodark")
    currentTheme = "notsodark"
    shared.sty.theme_use("notsodark")

#=======================================================================
#
#   Make Menu Frame buttons
#
#=======================================================================
def setup_menu_buttons(widget):
    """
    Make the context menu buttons
    """
    TButton_1 = ttk.Button(widget)
    TButton_1.place(x=0, y=0, height=28, width=83)
    TButton_1.configure(command=lambda e=0: setup_levelframe(e))
    TButton_1.configure(takefocus="")
    TButton_1.configure(text='''Home''')
    TButton_1.configure(compound='left')
    #----------------------------------------------------------
    TButton_2 = ttk.Button(widget)
    TButton_2.place(x=0, y=33, height=28, width=83)   # 33 = 0+28+5
    TButton_2.configure(command=lambda e=1: setup_levelframe(e))
    TButton_2.configure(takefocus="")
    TButton_2.configure(text='''levle1''')
    TButton_2.configure(compound='left')
    #----------------------------------------------------------
    TButton_3 = ttk.Button(widget)
    TButton_3.place(x=0, y=66, height=28, width=83)   # 66 = 33+28+5
    TButton_3.configure(command=lambda e=2: setup_levelframe(e))
    TButton_3.configure(takefocus="")
    TButton_3.configure(text='''Level2''')
    TButton_3.configure(compound='left')
    #----------------------------------------------------------
    TButton_4 = ttk.Button(widget)
    TButton_4.place(x=0, y=99, height=28, width=83)   # 99 = 66+28+5
    TButton_4.configure(command=lambda e=3: setup_levelframe(e))
    TButton_4.configure(takefocus="")
    TButton_4.configure(text='''Level3''')
    TButton_4.configure(compound='left')
    #----------------------------------------------------------
    TButton_5 = ttk.Button(widget)
    TButton_5.place(x=0, y=132, height=28, width=83)   # 132 = 99+28+5
    TButton_5.configure(command=lambda e=4: setup_levelframe(e))
    TButton_5.configure(takefocus="")
    TButton_5.configure(text='''Level4''')
    TButton_5.configure(compound='left')

#=======================================================================
#
#   Make the context Menu Frame as hold the Menu Frame buttons Toggleabel
#
#=======================================================================
def show_widget(widget):
    """
    Place a context  Menu Frame on screen
    """
    widget.place(x=435, y=20, height=330, width=85)
    setup_menu_buttons(widget)

def hide_widget(widget):
    """
    Remove the context  Menu Frame
    """
    widget.place_forget()
 

#=======================================================================
#
#   Make Level Frames - demo
#
#=======================================================================
def setup_levelframe(p1):   # p1 is the event variable from the context menu buttons
    """
    Make a level frame to hold the level content - here onely a label as demo
    """
    if p1==0:
        TFrameHome = ttk.Frame(_w1.TFrame1)
        TFrameHome.place(x=0, y=20, height=355-26, width=545-6)
        TFrameHome.configure(relief='groove')
        TFrameHome.configure(borderwidth="0")
        TFrameHome.configure(relief="groove")
        home_lbl = tk.Label(TFrameHome)
        home_lbl.place(x=0+2, y=0+18, height=355-4, width=545-4)
        home_lbl.configure(activebackground="#f9f9f9")
        home_lbl.configure(anchor='center')
        home_lbl.configure(compound='left')
        home_lbl.configure(text='Home')
        shared.frame=TFrameHome
    if p1==1:
        TFrameLevel1 = ttk.Frame(_w1.TFrame1)
        TFrameLevel1.place(x=0, y=20, height=355-26, width=545-6)
        TFrameLevel1.configure(relief='groove')
        TFrameLevel1.configure(borderwidth="0")
        TFrameLevel1.configure(relief="groove")
        Level1_lbl = tk.Label(TFrameLevel1)
        Level1_lbl.place(x=0+2, y=0+18, height=355-4, width=545-4)
        Level1_lbl.configure(activebackground="#f9f9f9")
        Level1_lbl.configure(anchor='center')
        Level1_lbl.configure(compound='left')
        Level1_lbl.configure(text='Level1')
        shared.frame=TFrameLevel1
    if p1==2:
        TFrameLevel2 = ttk.Frame(_w1.TFrame1)
        TFrameLevel2.place(x=0, y=20, height=355-26, width=545-6)
        TFrameLevel2.configure(relief='groove')
        TFrameLevel2.configure(borderwidth="0")
        TFrameLevel2.configure(relief="groove")
        Level2_lbl = tk.Label(TFrameLevel2)
        Level2_lbl.place(x=0+2, y=0+18, height=355-4, width=545-4)
        Level2_lbl.configure(activebackground="#f9f9f9")
        Level2_lbl.configure(anchor='center')
        Level2_lbl.configure(compound='left')
        Level2_lbl.configure(text='Level2')
        shared.frame=TFrameLevel2
    if p1==3:
        TFrameLevel3 = ttk.Frame(_w1.TFrame1)
        TFrameLevel3.place(x=0, y=20, height=355-26, width=545-6)
        TFrameLevel3.configure(relief='groove')
        TFrameLevel3.configure(borderwidth="0")
        TFrameLevel3.configure(relief="groove")
        Level3_lbl = tk.Label(TFrameLevel3)
        Level3_lbl.place(x=0+2, y=0+18, height=355-4, width=545-4)
        Level3_lbl.configure(activebackground="#f9f9f9")
        Level3_lbl.configure(anchor='center')
        Level3_lbl.configure(compound='left')
        Level3_lbl.configure(text='Level3')
        shared.frame=TFrameLevel3
    if p1==4:
        TFrameLevel4 = ttk.Frame(_w1.TFrame1)
        TFrameLevel4.place(x=0, y=20, height=355-26, width=545-6)
        TFrameLevel4.configure(relief='groove')
        TFrameLevel4.configure(borderwidth="0")
        TFrameLevel4.configure(relief="groove")
        Level4_lbl = tk.Label(TFrameLevel4)
        Level4_lbl.place(x=0+2, y=0+18, height=355-4, width=545-4)
        Level4_lbl.configure(activebackground="#f9f9f9")
        Level4_lbl.configure(anchor='center')
        Level4_lbl.configure(compound='left')
        Level4_lbl.configure(text='Level4')
        shared.frame=TFrameLevel4

#=======================================================================
#
#   Make a Hamburgermenu widget class
#
#=======================================================================
class Hamburgermenu:
    """To achieve toggling between two GIFs on a label within a canvas-based window"""
    def __init__(self, parent_frame, window_x, window_y, window_width, window_height, gif_paths, tooltip_text):
        #  set actual frame
        self.frame = ttk.Frame(parent_frame)
        self.frame.pack(anchor='ne')
        self.text=tooltip_text
        #  make a canvas to display the gif
        self.canvas = tk.Canvas(self.frame, width=window_width, height=window_height)
        self.canvas.pack()
        # make a window on canvas to hold a label for the gif
        self.window = self.canvas.create_window(window_x, window_y, width=window_width, height=window_height)
        self.label = tk.Label(self.canvas)
        hamburger_widget_demo.ToolTip(self.label, self.text)
        self.label.pack()
        # load the gif
        self.gif_paths = gif_paths
        self.current_gif_index = 0
        self.load_gif(self.gif_paths[self.current_gif_index])
        # bind the mousebutton event
        self.label.bind("<Button-1>", self.toggle_gif)  # Bind left mouse button click event
 
    def load_gif(self, gif_path):
        """make a gif instance and put it on label"""
        img = tk.PhotoImage(file=gif_path)
        self.label.config(image=img)
        self.label.image = img  # Keep a reference to prevent the image from being garbage collected

    def toggle_gif(self, event):
        """toggle gif instance on label"""
        self.current_gif_index = (self.current_gif_index + 1) % len(self.gif_paths)
        if self.current_gif_index == 0:
            hide_widget(_w1.TfrmMenu)   # menu frame
            if shared.frame:
                shared.frame.destroy()
        else:
             show_widget(_w1.TfrmMenu)   # menu frame
        self.load_gif(self.gif_paths[self.current_gif_index])

#=======================================================================
#
#   Clean-up and closing
#
#=======================================================================
def TButton_Exit(*args):
    if _debug:
        print('hamburger_widget_demo_support.TButton_Exit')
        for arg in args:
            print ('    another arg:', arg)
        sys.stdout.flush()
        sys.exit()        

#=======================================================================
#
#   Main Program
#
#=======================================================================
if __name__ == '__main__':
    hamburger_widget_demo.start_up()
